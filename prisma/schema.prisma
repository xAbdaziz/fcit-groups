generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model courses {
  course_id       Int               @id @default(autoincrement())
  course_name     String            @db.VarChar(100)
  course_code     String            @db.VarChar(4)
  course_number   Int
  whatsapp_groups whatsapp_groups[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model whatsapp_groups {
  group_id   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  section    String   @db.VarChar(3)
  gender     Int?     @default(0)
  group_link String   @db.VarChar(50)
  course_id  Int?
  courses    courses? @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  gender        Int      @default(0)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}